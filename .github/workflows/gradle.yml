#name: Java CI with Gradle
#
#on:
#  push:
#    branches: ["main"]
#  pull_request:
#    branches: ["main"]
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout Repository
#        uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          distribution: 'temurin'
#          java-version: '17'
#
#      - name: Ensure application.yml exists
#        run: |
#          mkdir -p ./src/main/resources
#          touch ./src/main/resources/application.yml
#          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml
#
#      - name: Grant execute permission for Gradlew
#        run: chmod +x ./gradlew
#
#      # ✅ Spring Boot Build (테스트 제외)
#      - name: Build Spring Boot Application
#        run: ./gradlew clean build -x test
#
#      # ✅ Docker 이미지 빌드 (캐싱 방지 위해 `--no-cache` 옵션 추가)
#      - name: Build Docker Image
#        run: docker build --no-cache -t farmfarm1234/farmfarm-img .
#
#      # ✅ Docker Hub 로그인
#      - name: Login to Docker Hub
#        run: echo "${{ secrets.DOCKERHUB_PW }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
#
#      # ✅ Docker Hub Push
#      - name: Push Docker Image to Docker Hub
#        run: docker push farmfarm1234/farmfarm-img
#
#      # ✅ GitHub IP 가져오기 (EC2 접근 허용을 위해)
#      - name: Get GitHub IP
#        id: ip
#        uses: haythem/public-ip@v1.2
#
#      # ✅ AWS 접근 권한 설정
#      - name: Configure AWS Credentials
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-region: ap-northeast-2
#
#      # ✅ AWS 보안 그룹에 GitHub IP 추가 (SSH 접속 허용)
#      - name: Add GitHub IP to AWS Security Group
#        run: |
#          aws ec2 authorize-security-group-ingress \
#            --group-id ${{ secrets.AWS_SG_ID }} \
#            --protocol tcp \
#            --port 22 \
#            --cidr ${{ steps.ip.outputs.ipv4 }}/32
#
#      # ✅ EC2 접속 후 배포 스크립트 실행
#      - name: Deploy to AWS EC2
#        uses: appleboy/ssh-action@v0.1.6
#        with:
#          host: ${{ secrets.EC2_HOST }}
#          username: ubuntu
#          key: ${{ secrets.EC2_KEY }}
#          port: ${{ secrets.EC2_SSH_PORT }}
#          timeout: 60s
#          script: |
#            echo "🔄 Stopping and Removing existing Docker container..."
#            sudo docker stop farmfarm-img || true
#            sudo docker rm farmfarm-img || true
#
#            echo "🗑️ Removing old Docker images..."
#            sudo docker rmi farmfarm1234/farmfarm-img || true
#
#            echo "🚀 Pulling latest Docker image..."
#            sudo docker pull farmfarm1234/farmfarm-img
#
#            echo "⚙️ Running new Docker container..."
#            sudo docker run -d -p 9000:9000 \
#                -v /home/ubuntu/config/application.yml:/app/config/application.yml \
#                --name farmfarm-img \
#                farmfarm1234/farmfarm-img
#
#            echo "✅ Deployment Completed!"
#
#      # ✅ 배포 완료 후 AWS 보안 그룹에서 GitHub IP 제거
#      - name: Remove GitHub IP from AWS Security Group
#        run: |
#          aws ec2 revoke-security-group-ingress \
#            --group-id ${{ secrets.AWS_SG_ID }} \
#            --protocol tcp \
#            --port 22 \
#            --cidr ${{ steps.ip.outputs.ipv4 }}/32


name: Test deploy

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code.  # Repo checkout
        uses: actions/checkout@v3

      - name: Check Node v           # Node v 확인
        run: node -v

      - name: Install dependencies   # 의존 파일 설치
        run: npm install

      - name: Build React App        # React Build
        run: npm run build

      - name: Install AWS CLI        # AWS CLI 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli

      - name: Deploy to S3           # S3로 업로드
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp --recursive --region ap-northeast-2 build s3://farmfarm-bucket
