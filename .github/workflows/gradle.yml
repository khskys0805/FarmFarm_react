name: Test deploy

on:
  push:
    branches:
      - main
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code  # 코드 가져오기
        uses: actions/checkout@v3

      - name: List directory structure (Debugging step)   # 디렉토리 구조 확인
        run: |
          ls -R

      - name: Check Node v           # Node v 확인
        run: node -v

      - name: Install dependencies   # 의존 파일 설치
        run: |
          cd src/main/frontend       # 상대 경로 수정
          npm install

      - name: Build React App        # React Build
        run: |
          cd src/main/frontend       # 상대 경로 수정
          REACT_APP_REDIRECT_URI=${{ secrets.REACT_APP_REDIRECT_URI }} \
          REACT_APP_APP_KEY=${{ secrets.REACT_APP_APP_KEY }} \
          REACT_APP_API_BASE_URL=${{ secrets.REACT_APP_API_BASE_URL }} \
          npm run build

      - name: Install AWS CLI        # AWS CLI 설치
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install awscli

      - name: Deploy to S3           # S3로 업로드
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp --recursive --region ap-northeast-2 src/main/frontend/build s3://farmfarm-bucket

      # ✅ EC2에서 기존 컨테이너와 이미지 삭제 (Push 전에 실행)
      - name: Remove old container & image from EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            echo "🔄 Stopping and Removing existing Frontend Docker container..."
            
            # 기존 컨테이너 ID를 자동으로 찾아서 중지 및 삭제
            CONTAINER_ID=$(sudo docker ps -a -q --filter "ancestor=farmfarm1234/farmfarm-react-image")
            if [ ! -z "$CONTAINER_ID" ]; then
                sudo docker stop $CONTAINER_ID
                sudo docker rm $CONTAINER_ID
            fi

            echo "🗑️ Removing old Frontend Docker images..."
            # 이미지 ID로 기존 이미지를 삭제
            IMAGE_ID=$(sudo docker images -q farmfarm1234/farmfarm-react-image)
            if [ ! -z "$IMAGE_ID" ]; then
                sudo docker rmi $IMAGE_ID
            fi

      # ✅ 새로운 Docker 이미지 빌드
      - name: Build Docker Image (Frontend)
        run: |
          cd src/main/frontend        # 상대 경로 수정
          docker build --no-cache -t farmfarm1234/farmfarm-react-image .

      # ✅ Docker Hub 로그인
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_PW }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # ✅ 새 이미지 Docker Hub에 Push
      - name: Push Frontend Docker Image to Docker Hub
        run: docker push farmfarm1234/farmfarm-react-image

      # ✅ EC2에서 새로운 이미지 가져오고 실행
      - name: Deploy Frontend to AWS EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          timeout: 60s
          script: |
            echo "🚀 Pulling latest Frontend Docker image..."
            sudo docker pull farmfarm1234/farmfarm-react-image

            echo "⚙️ Running new Frontend Docker container..."
            sudo docker run -d -p 3000:3000 \
              --env-file .env \
              -e NODE_OPTIONS="--max-old-space-size=4096" \
              -e HOST=0.0.0.0 \
              farmfarm1234/farmfarm-react-image
            
            echo " ✅ Frontend Deployment Completed!"
